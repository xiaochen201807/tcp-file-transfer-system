name: Build Native Binaries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]
  workflow_dispatch:

env:
  MAVEN_OPTS: "-Xmx2g -XX:+UseG1GC"
  NATIVE_IMAGE_OPTS: "--no-fallback --enable-http --enable-https"

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      java-changed: ${{ steps.changes.outputs.java }}
      config-changed: ${{ steps.changes.outputs.config }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for changes
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          java:
            - 'tcp-server/src/**'
            - 'tcp-client/src/**'
            - '**/pom.xml'
          config:
            - '**/*.json'
            - '**/*.yml'
            - '**/*.yaml'

  compile:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.java-changed == 'true'
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'graalvm'
        java-version: '17'
        components: 'native-image'

    - name: Generate version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "version=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

    - name: Generate cache key
      id: cache-key
      run: |
        echo "key=${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}" >> $GITHUB_OUTPUT

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: ${{ runner.os }}-m2

    - name: Cache GraalVM build cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/graalvm/
          ~/.gradle/caches/
        key: ${{ runner.os }}-graalvm-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-graalvm-
          ${{ runner.os }}-

    - name: Compile Server
      run: |
        cd tcp-server
        mvn clean compile -DskipTests -Dversion=${{ steps.version.outputs.version }}

    - name: Compile Client
      run: |
        cd tcp-client
        mvn clean compile -DskipTests -Dversion=${{ steps.version.outputs.version }}

    - name: Upload compiled classes
      uses: actions/upload-artifact@v3
      with:
        name: compiled-classes
        path: |
          tcp-server/target/classes/
          tcp-client/target/classes/
        retention-days: 1

  test:
    runs-on: ubuntu-latest
    needs: [check-changes, compile]
    if: needs.check-changes.outputs.java-changed == 'true'
    strategy:
      matrix:
        test-type: [unit, integration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'graalvm'
        java-version: '17'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ needs.compile.outputs.cache-key }}
        restore-keys: ${{ runner.os }}-m2

    - name: Download compiled classes
      uses: actions/download-artifact@v3
      with:
        name: compiled-classes
        path: .

    - name: Restore target directories
      run: |
        mkdir -p tcp-server/target
        mkdir -p tcp-client/target
        mv tcp-server/target/classes tcp-server/target/
        mv tcp-client/target/classes tcp-client/target/

    - name: Run ${{ matrix.test-type }} tests
      run: |
        if [ "${{ matrix.test-type }}" = "unit" ]; then
          mvn test -Dtest.type=unit
        else
          mvn test -Dtest.type=integration
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: [check-changes, compile]
    if: needs.check-changes.outputs.java-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'graalvm'
        java-version: '17'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ needs.compile.outputs.cache-key }}
        restore-keys: ${{ runner.os }}-m2

    - name: Dependency check
      run: |
        mvn org.owasp:dependency-check-maven:check

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: |
          tcp-server/target/dependency-check-report.html
          tcp-client/target/dependency-check-report.html
        retention-days: 30

  build-native:
    needs: [check-changes, compile, test, security-scan]
    if: needs.check-changes.outputs.java-changed == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
            extension: .exe
            graalvm-arch: amd64
          - os: ubuntu-latest
            platform: linux
            arch: x64
            extension: ""
            graalvm-arch: amd64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            extension: ""
            graalvm-arch: aarch64
          - os: macos-latest
            platform: macos
            arch: x64
            extension: ""
            graalvm-arch: amd64
          - os: macos-latest
            platform: macos
            arch: arm64
            extension: ""
            graalvm-arch: aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'graalvm'
        java-version: '17'
        components: 'native-image'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ needs.compile.outputs.cache-key }}
        restore-keys: ${{ runner.os }}-m2

    - name: Cache GraalVM build cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/graalvm/
          ~/.gradle/caches/
        key: ${{ runner.os }}-graalvm-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-graalvm-
          ${{ runner.os }}-

    - name: Download compiled classes
      uses: actions/download-artifact@v3
      with:
        name: compiled-classes
        path: .

    - name: Restore target directories
      run: |
        mkdir -p tcp-server/target
        mkdir -p tcp-client/target
        mv tcp-server/target/classes tcp-server/target/
        mv tcp-client/target/classes tcp-client/target/

    - name: Build Server Native
      run: |
        cd tcp-server
        mvn package -Pnative -DskipTests -Dmaven.compiler.skip=true -Dversion=${{ needs.compile.outputs.version }}

    - name: Build Client Native
      run: |
        cd tcp-client
        mvn package -Pnative -DskipTests -Dmaven.compiler.skip=true -Dversion=${{ needs.compile.outputs.version }}

    - name: Copy external configs
      run: |
        if [ -f "response-config-external.json" ]; then
          cp response-config-external.json tcp-server/target/response-config.json
        fi
        if [ -f "client-config-external.json" ]; then
          cp client-config-external.json tcp-client/target/client-config.json
        fi

    - name: Create release directory
      run: |
        mkdir -p release/${{ matrix.platform }}-${{ matrix.arch }}

    - name: Copy binaries
      run: |
        cp tcp-server/target/tcp-server-native${{ matrix.extension }} release/${{ matrix.platform }}-${{ matrix.arch }}/tcp-server-native${{ matrix.extension }}
        cp tcp-client/target/tcp-client-native${{ matrix.extension }} release/${{ matrix.platform }}-${{ matrix.arch }}/tcp-client-native${{ matrix.extension }}
        
        # Copy configs
        cp tcp-server/target/response-config.json release/${{ matrix.platform }}-${{ matrix.arch }}/ 2>/dev/null || true
        cp tcp-client/target/client-config.json release/${{ matrix.platform }}-${{ matrix.arch }}/ 2>/dev/null || true

    - name: Optimize binaries
      run: |
        # 生成校验和
        cd release/${{ matrix.platform }}-${{ matrix.arch }}
        sha256sum tcp-server-native${{ matrix.extension }} > checksums.txt
        sha256sum tcp-client-native${{ matrix.extension }} >> checksums.txt
        
        # 使用UPX压缩（如果可用）
        if command -v upx &> /dev/null; then
          upx --best tcp-server-native${{ matrix.extension }}
          upx --best tcp-client-native${{ matrix.extension }}
        fi

    - name: Create startup scripts
      run: |
        if [ "${{ matrix.platform }}" = "windows" ]; then
          cat > release/${{ matrix.platform }}-${{ matrix.arch }}/start-server.bat << 'EOF'
        @echo off
        chcp 65001 >nul
        echo 🚀 启动TCP服务端...
        echo 版本: ${{ needs.compile.outputs.version }}
        tcp-server-native.exe
        pause
        EOF
        
          cat > release/${{ matrix.platform }}-${{ matrix.arch }}/start-client.bat << 'EOF'
        @echo off
        chcp 65001 >nul
        echo 🚀 启动TCP客户端...
        echo 版本: ${{ needs.compile.outputs.version }}
        tcp-client-native.exe
        pause
        EOF
        else
          cat > release/${{ matrix.platform }}-${{ matrix.arch }}/start-server.sh << 'EOF'
        #!/bin/bash
        echo "🚀 启动TCP服务端..."
        echo "版本: ${{ needs.compile.outputs.version }}"
        ./tcp-server-native
        EOF
        
          cat > release/${{ matrix.platform }}-${{ matrix.arch }}/start-client.sh << 'EOF'
        #!/bin/bash
        echo "🚀 启动TCP客户端..."
        echo "版本: ${{ needs.compile.outputs.version }}"
        ./tcp-client-native
        EOF
        
          chmod +x release/${{ matrix.platform }}-${{ matrix.arch }}/*.sh
        fi

    - name: Create README
      run: |
        cat > release/${{ matrix.platform }}-${{ matrix.arch }}/README.md << EOF
        # TCP Demo Native Binaries
        
        ## 平台信息
        - 平台: ${{ matrix.platform }}
        - 架构: ${{ matrix.arch }}
        - 版本: ${{ needs.compile.outputs.version }}
        - 构建时间: $(date)
        
        ## 文件说明
        - \`tcp-server-native${{ matrix.extension }}\`: TCP服务端
        - \`tcp-client-native${{ matrix.extension }}\`: TCP客户端
        - \`checksums.txt\`: 文件校验和
        - \`start-*.bat/sh\`: 启动脚本
        
        ## 使用方法
        ${{ matrix.platform == 'windows' && '运行 start-server.bat 启动服务端，运行 start-client.bat 启动客户端' || '运行 ./start-server.sh 启动服务端，运行 ./start-client.sh 启动客户端' }}
        
        ## 访问地址
        - 服务端管理: http://localhost:8080/admin/status
        - 客户端界面: http://localhost:8081
        EOF

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: native-binaries-${{ matrix.platform }}-${{ matrix.arch }}
        path: release/${{ matrix.platform }}-${{ matrix.arch }}/
        retention-days: 30

  create-release:
    needs: [check-changes, build-native]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/

    - name: Create release archive
      run: |
        mkdir -p release
        for dir in artifacts/native-binaries-*/; do
          platform=$(basename "$dir")
          cp -r "$dir" "release/$platform"
        done
        
        # Create zip files for each platform
        cd release
        for dir in */; do
          platform=$(basename "$dir")
          zip -r "${platform}.zip" "$platform"
        done

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: release/
        asset_name: native-binaries-${{ github.event.release.tag_name }}
        asset_content_type: application/zip

  notify:
    needs: [check-changes, build-native, create-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build-native.result == 'success'
      run: |
        echo "✅ Native binaries built successfully!"
        echo "Platforms: Windows x64, Linux x64, Linux ARM64, macOS x64, macOS ARM64"
        echo "Version: ${{ needs.compile.outputs.version }}"

    - name: Notify on failure
      if: needs.build-native.result == 'failure'
      run: |
        echo "❌ Native binary build failed!"
        echo "Please check the build logs for details."
