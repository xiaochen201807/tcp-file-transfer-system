name: Build Native Binaries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]
  workflow_dispatch:

jobs:
  build-native:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm'
        components: 'native-image'
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-
    
    - name: Build Server Native
      run: |
        cd tcp-server
        mvn -B clean package -Pnative -DskipTests
    
    - name: Build Client Native
      run: |
        cd tcp-client  
        mvn -B clean package -Pnative -DskipTests
    
    - name: Create release directory
      shell: bash
      run: |
        mkdir -p release
        if [ "${{ matrix.platform }}" = "windows" ]; then
          cp tcp-server/target/tcp-server-native.exe release/
          cp tcp-client/target/tcp-client-native.exe release/
        else
          cp tcp-server/target/tcp-server-native release/
          cp tcp-client/target/tcp-client-native release/
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tcp-demo-${{ matrix.platform }}
        path: release/
        retention-days: 30

  create-release:
    needs: build-native
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Create release archives
      run: |
        cd artifacts
        for dir in tcp-demo-*/; do
          platform=$(echo $dir | sed 's/tcp-demo-//g' | sed 's/\///g')
          cd "$dir"
          zip -r "../tcp-demo-${platform}.zip" .
          cd ..
        done
    
    - name: Upload to release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
